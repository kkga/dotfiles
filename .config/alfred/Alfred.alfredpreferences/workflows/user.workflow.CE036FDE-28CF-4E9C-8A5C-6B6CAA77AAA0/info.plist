<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.lisowski-development.alfred.bitwarden</string>
	<key>connections</key>
	<dict>
		<key>01DFFE0F-13AB-4E19-AC39-8E2177548224</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D21298B3-763D-48F9-A804-C3B06D3B70E7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>09AC0796-377F-4D73-87DC-B1164AC85A95</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D71065D5-E20E-435B-A76B-9C351D59165F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>102D0B94-B4FC-4450-9B5B-9D76AA0FF12C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8820573B-DB5E-4B65-9178-3DD86CF620CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>201D2F2C-024E-4FA6-8B0C-CF32974E5077</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8C058736-CA55-492F-B2EC-8715A0266564</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>29656ADA-02CB-48FC-BC0E-20376CF8D8EF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>403521D2-AFA4-4C11-A9AC-45549345A1DE</string>
				<key>modifiers</key>
				<integer>524288</integer>
				<key>modifiersubtext</key>
				<string>Copy TOTP code</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D21298B3-763D-48F9-A804-C3B06D3B70E7</string>
				<key>modifiers</key>
				<integer>262144</integer>
				<key>modifiersubtext</key>
				<string>Login to Bitwarden Vault</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>8B840C52-8B3C-4795-95A2-B8BFB3AD4C24</string>
				<key>modifiers</key>
				<integer>8388608</integer>
				<key>modifiersubtext</key>
				<string>Unlock Bitwarden Vault.</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>5811419C-5D78-450A-8F28-46CC209BF760</string>
				<key>modifiers</key>
				<integer>131072</integer>
				<key>modifiersubtext</key>
				<string>Copy Username</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>D049EE1A-03D1-4BDF-8920-EE8667E7365C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>A2718C33-DE84-4E0F-8A09-37DA3C9E8732</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Logout of Bitwarden Vault</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>403521D2-AFA4-4C11-A9AC-45549345A1DE</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A1412D16-E101-4A82-8841-485C32764480</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>482846CB-67CD-458E-9E2F-F4F208AB34D7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EF20647F-5BE3-4143-A667-40375A6C91F8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5811419C-5D78-450A-8F28-46CC209BF760</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>815177FB-CED1-42F3-AC5B-C1AC60735FA1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>58852D6A-18EC-4719-8B6D-3830DE3EECE7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C59B281E-81B3-45CC-AF44-99A6A66C2087</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>58BA8F4E-3368-453A-9490-DBE7FE60328C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>01DFFE0F-13AB-4E19-AC39-8E2177548224</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>59F80385-2185-4AB0-BE88-A49588D5F66B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>102D0B94-B4FC-4450-9B5B-9D76AA0FF12C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<true/>
			</dict>
		</array>
		<key>69788964-322B-4148-ADFF-46DD4DB9276E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7D01ACF0-2569-46CE-8A8D-AD9CD3736476</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>815177FB-CED1-42F3-AC5B-C1AC60735FA1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8F65DC4B-ED8E-4EE0-A6E0-14C1F0CDF3A4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8B840C52-8B3C-4795-95A2-B8BFB3AD4C24</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9CD82344-6D4F-4C13-BB10-342D19DBE209</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A1412D16-E101-4A82-8841-485C32764480</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5D0CA291-8861-4216-8985-C0CB13A7A0D2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A2718C33-DE84-4E0F-8A09-37DA3C9E8732</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>266860CE-FC28-42E1-998B-229C5AEDF262</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BD91F384-487A-41CF-87FD-72F6CC5FA91F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8B840C52-8B3C-4795-95A2-B8BFB3AD4C24</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C2D0FB11-55FC-4FD2-B32A-9923121F0321</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A2718C33-DE84-4E0F-8A09-37DA3C9E8732</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C594F6CC-98D0-45DF-871B-AACC53E6B44C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>2262A79A-ACCC-44CF-9C89-051CB07A0CB4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D049EE1A-03D1-4BDF-8920-EE8667E7365C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>201D2F2C-024E-4FA6-8B0C-CF32974E5077</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D21298B3-763D-48F9-A804-C3B06D3B70E7</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E78B5564-10CE-469F-9C55-B56C3E7D41A7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DE8D285B-733F-4B2D-91DA-4613717E2005</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>29656ADA-02CB-48FC-BC0E-20376CF8D8EF</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DF86BC53-DFDC-4862-879C-2988E0680511</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C594F6CC-98D0-45DF-871B-AACC53E6B44C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>EF20647F-5BE3-4143-A667-40375A6C91F8</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B4A5236B-C4A6-4799-A0BE-28E6035E6337</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FED5E784-7A96-4E70-BA0D-40E4C79B7C98</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>69788964-322B-4148-ADFF-46DD4DB9276E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>58852D6A-18EC-4719-8B6D-3830DE3EECE7</string>
				<key>modifiers</key>
				<integer>524288</integer>
				<key>modifiersubtext</key>
				<string>Remove Bitwarden 2fa mode configuration</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FF2D41F7-FB7E-4CCD-B82B-4F66FCC78F37</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>09AC0796-377F-4D73-87DC-B1164AC85A95</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Claas Lisowski</string>
	<key>description</key>
	<string>Get passwords, username and TOTP from Bitwarden</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Bitwarden CLI</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
import json
from subprocess import Popen, PIPE
import os

details = sys.argv[1].replace('"','')
details = details.splitlines()
details.pop(0)

my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

def get_bw_exec():
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        print(json.dumps(error_result(type="install")))
        exit(2)
    return bw_exec

def getpassword(service):
    cmd = '/usr/bin/security find-generic-password -w -s {service}'.format(service=service)
    proc = Popen(cmd.split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    if not output:
        exit(1)
    return output.strip()

if 'error-noinstall' in details[0]:
    cmd = 'open https://github.com/bitwarden/cli'
    proc = Popen(cmd.split(), stdout=PIPE)
    exit(1)
elif 'error-nonefound' in details[0]:
    exit(1)
else:
    bw_exec = get_bw_exec()
    session_key = getpassword('alfred-bitwarden-session-key')
    my_env["BW_SESSION"] = str(session_key)
    cmd = "{bw_exec} get totp {item}".format(bw_exec=bw_exec, item=details[1])
    proc = Popen(cmd.split(), env=my_env, stdout=PIPE)
    output =  proc.stdout.read().decode()
    sys.stdout.write(output.strip())
    sys.stdout.flush()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>403521D2-AFA4-4C11-A9AC-45549345A1DE</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>transient</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>A1412D16-E101-4A82-8841-485C32764480</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string>Copied totp to clipboard.</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>5D0CA291-8861-4216-8985-C0CB13A7A0D2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<true/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{var:STATUS_MESSAGE_DESC}</string>
				<key>title</key>
				<string>{var:STATUS_MESSAGE}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>E78B5564-10CE-469F-9C55-B56C3E7D41A7</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>58BA8F4E-3368-453A-9490-DBE7FE60328C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>bwlogin</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Bitwarden Login</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>01DFFE0F-13AB-4E19-AC39-8E2177548224</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>from __future__ import print_function
from workflow import Workflow
from workflow.util import set_config
from subprocess import Popen, PIPE
import os
import keychain
import shlex

log = None
wf = Workflow()
result = {}  # type: dict
result["items"] = []
my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

def build_osascript(login_mail, title, mfa_enabled=None, mfa_method=None):
    log.debug('login: START for {user} and title: {title}'.format(user=login_mail, title=title))
    if not mfa_enabled:
        args = [login_mail, title, 'hidden']
    else:
        args = [login_mail, title, '']
    password = None
    script = """on run argv
    set AppleScript's text item delimiters to " "
    if item 3 of argv as string contains "hidden" then
      set my_password to display dialog item 2 of argv as string &amp; ":" with title "Bitwarden " &amp; item 1 of argv as string with icon caution default answer "" buttons {"Cancel", "OK"} default button 2 giving up after 295 with hidden answer
else
    set my_password to display dialog item 2 of argv as string &amp; ":" with title "Bitwarden " &amp; item 1 of argv as string with icon caution default answer "" buttons {"Cancel", "OK"} default button 2 giving up after 295 with answer
end if
    if the button returned of the result is "Cancel" then
        error number -128
    else
    return (text returned of my_password)
    end if
    end run
    """
    log.debug('login: START osascript to ask for the password.')
    proc = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    password, err = proc.communicate(script)
    log.debug('login: Evaluate returned result status from the password entry.')
    if "-128" in err:
        log.debug('login: osascript - User cancelled login')
        return None, True, 'User cancelled login', None
    elif err:
        log.debug('login: osascript - An error occured: {err}'.format(err=err))
        return None, True, 'An error occured, entering password', err
    elif len(password.strip()) &lt; 1:
        log.debug('login: osascript - No password was entered - leading and trailing spaces are stripped')
        return None, True, 'No password was entered', 'Leading and trailing spaces are stripped'
    return password, err, None, None


def login(login_mail, mfa_enabled=None, mfa_method=None):
    log.debug('login: - bw Start running bw login')
    password, err, status, message = build_osascript(login_mail, 'Enter Bitwarden password')
    if err:
        return out, err, status, message

    if not mfa_enabled:
        cmd = "/usr/local/bin/bw --raw login \"{login_mail}\" \"{password}\"".format(login_mail=login_mail.strip(), password=password.strip())
    elif mfa_enabled and not mfa_method:
        mfa_code, err, status, message = build_osascript(login_mail, 'Enter Bitwarden second factor code', True)
        cmd = "/usr/local/bin/bw --raw login \"{login_mail}\" \"{password}\" --code {mfa_code}".format(login_mail=login_mail.strip(), password=password.strip(), mfa_code=mfa_code.strip())
    else:
        mfa_code, err, status, message = build_osascript(login_mail, 'Enter Bitwarden second factor code', True)
        cmd = "/usr/local/bin/bw --raw login \"{login_mail}\" \"{password}\" --method {mfa_method} --code {mfa_code}".format(login_mail=login_mail.strip(), password=password.strip(), mfa_method=mfa_method.strip(), mfa_code=mfa_code.strip())

    split_cmd = shlex.split(cmd)
    proc = Popen(split_cmd, env=my_env, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    print('error output: {err}'.format(err=err))
    password, cmd = None, None
    log.debug('login: bw Evaluating bw login result')
    if err:
        if 'Two-step login' in err:
            log.debug('login: bw Two Step login in the account enabled but not in the workflow config: {err}'.format(err=err))
            return out, err, '2FA config not correct/missing.', err
        log.debug('login: bw An error occured: {err}'.format(err=err))
        return out, err, 'An error occured while logging in', err
    if 'incorrect' in out:
        log.debug('login: bw incorrect credentials {out}'.format(out=out))
        return out, None, 'Incorrect credentials', out
    if 'Invalid' in out:
        log.debug('login: bw Invalid master password {out}'.format(out=out))
        return out, None, 'Invalid master password', out
    if 'You are already logged' in out:
        log.debug('login: bw You are already logged in {out}'.format(out=out))
        return out, None, 'You are already logged in', out
    log.debug('login: bw Return login result')
    return out, None, None, None

def set_notification(status, message):
        set_config('STATUS_MESSAGE', status)
        set_config('STATUS_MESSAGE_DESC', message)

def get_bw_exec():
    log.debug('START get_bw_exec')
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        log.debug('ERROR get_bw_exec: no bw binary found.')
        set_notification('Bitwarden CLI not found.', 'Please install the Bitwarden CLI first.')
        exit(2)
    log.debug('END found get_bw_exec')
    return bw_exec


def set_login():
    proc = Popen("launchctl setenv BW_ASKPASS true".split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    if output:
        set_notification("Failed to set login env key", output)
        exit(1)
    return


def main(wf):
    log.debug('MAIN: Started')
    out = keychain.getpassword('alfred-bitwarden-email-address')
    if not out:
        log.debug('MAIN: No login mail configuration found.')
        set_notification('Error Login Config', 'No login email is configured.')
        exit(1)
    else:
        login_mail = out.strip()

    out = keychain.getpassword('alfred-bitwarden-2fa-method')
    if not out:
        login_mfa_method = False
        log.debug('MAIN: 2fa method not set')
    else:
        login_mfa_method = out.strip()

    out = keychain.getpassword('alfred-bitwarden-2fa-enabled')
    if not out:
        login_mfa_enabled = False
        log.debug('MAIN: 2fa not used')
    elif 'off' in out:
        login_mfa_enabled = False
        log.debug('MAIN: 2fa not used')
    else:
        login_mfa_enabled = True

    bw_exec = get_bw_exec()

    if not login_mfa_enabled:
        log.debug('MAIN: Start login without 2fa')
        output, err, status, message  = login(login_mail)
        log.debug('MAIN: login result: {output} (trimmed)'.format(output=output[:15]))
    elif login_mfa_enabled and not login_mfa_method:
        log.debug('MAIN: Start login with 2fa but without a method set')
        output, err, status, message  = login(login_mail, True)
        log.debug('MAIN: 2fa login result: {output} (trimmed)'.format(output=output[:15]))
    else:
        log.debug('MAIN: Start login with 2fa and method set to: {method}'.format(method=login_mfa_method))
        output, err, status, message  = login(login_mail, True, login_mfa_method)
        log.debug('MAIN: 2fa with method set login result: {output} (trimmed)'.format(output=output[:15]))

    if err:
        log.debug('MAIN: Error occured: {err}'.format(err=err))
        set_notification(status, message)
        exit(1)
    if status or message:
        set_notification(status, message)
    else:
        output = keychain.setpassword('alfred-bitwarden-session-key', output.strip())
        if output:
            log.debug('MAIN: Error setting session key occured: {output}'.format(output=output))
            set_notification('Error setting session-key.', output)
            exit(1)
        else:
            set_login()
            set_notification('Login Successful.', 'User: {user}'.format(user=login_mail))

if __name__ == '__main__':
    wf = Workflow()
    log = wf.logger
    wf.run(main)</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>D21298B3-763D-48F9-A804-C3B06D3B70E7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<true/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{var:STATUS_MESSAGE_DESC}</string>
				<key>title</key>
				<string>{var:STATUS_MESSAGE}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>9CD82344-6D4F-4C13-BB10-342D19DBE209</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>from __future__ import print_function
from workflow import Workflow
from workflow.util import set_config
from subprocess import Popen, PIPE
import os
import keychain
import shlex

log = None
wf = Workflow()
result = {}  # type: dict
result["items"] = []
my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

def build_osascript(login_mail, title):
    log.debug('unlock: START for {user} and title: {title}'.format(user=login_mail, title=title))
    args = [login_mail, title, 'hidden']
    password = None
    script = """on run argv
    set AppleScript's text item delimiters to " "
    set my_password to display dialog item 2 of argv as string &amp; ":" with title "Bitwarden " &amp; item 1 of argv as string with icon caution default answer "" buttons {"Cancel", "OK"} default button 2 giving up after 295 with hidden answer
    if the button returned of the result is "Cancel" then
        error number -128
    else
    return (text returned of my_password)
    end if
    end run
    """
    log.debug('unlock: START osascript to ask for the password.')
    proc = Popen(['osascript', '-'] + args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    password, err = proc.communicate(script)
    log.debug('unlock: Evaluate returned result status from the password entry.')
    if "-128" in err:
        log.debug('unlock: osascript - User cancelled unlocking')
        return None, True, 'User cancelled unlocking', None
    elif err:
        log.debug('unlock: osascript - An error occured: {err}'.format(err=err))
        return None, True, 'An error occured, entering password', err
    elif len(password.strip()) &lt; 1:
        log.debug('unlock: osascript - No password was entered - leading and trailing spaces are stripped')
        return None, True, 'No password was entered', 'Leading and trailing spaces are stripped'
    return password, err, None, None


def login(login_mail):
    log.debug('unlock: - bw Start running bw unlock')
    password, err, status, message = build_osascript(login_mail, 'Enter Bitwarden password to unlock')
    if err:
        return out, err, status, message

    cmd = "/usr/local/bin/bw --raw unlock \"{password}\"".format(password=password.strip())
    split_cmd = shlex.split(cmd)
    proc = Popen(split_cmd, env=my_env, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    print('error output: {err}'.format(err=err))
    password, cmd = None, None
    log.debug('unlock: bw Evaluating bw login result')
    if err:
        log.debug('unlock: bw An error occured: {err}'.format(err=err))
        return out, err, 'An error occured while logging in', err
    if 'incorrect' in out:
        log.debug('unlock: bw incorrect credentials {out}'.format(out=out))
        return out, None, 'Incorrect credentials', out
    if 'Invalid' in out:
        log.debug('unlock: bw Invalid master password {out}'.format(out=out))
        return out, None, 'Invalid master password', out
    if 'You are already logged' in out:
        log.debug('unlock: bw you are already logged in {out}'.format(out=out))
        return out, None, 'You are already logged in', out
    if 'You are not logged in' in out:
        log.debug('unlock: bw you are not logged in {out}'.format(out=out))
        return out, None, 'You are not logged in', out
    log.debug('unlock: bw Return unlock result')
    return out, None, None, None

def set_notification(status, message):
        set_config('STATUS_MESSAGE', status)
        set_config('STATUS_MESSAGE_DESC', message)

def get_bw_exec():
    log.debug('START get_bw_exec')
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        log.debug('ERROR get_bw_exec: no bw binary found.')
        set_notification('Bitwarden CLI not found.', 'Please install the Bitwarden CLI first.')
        exit(2)
    log.debug('END found get_bw_exec')
    return bw_exec

def set_login():
    proc = Popen("launchctl setenv BW_ASKPASS true".split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    if output:
        set_notification("Failed to set login env key", output)
        exit(1)
    return

def main(wf):
    log.debug('MAIN: Started')
    out = keychain.getpassword('alfred-bitwarden-email-address')
    if not out:
        log.debug('MAIN: No login mail configuration found.')
        set_notification('Error Login Config', 'No login email is configured.')
        exit(1)
    else:
        login_mail = out.strip()

    bw_exec = get_bw_exec()

    log.debug('MAIN: Start unlock')
    output, err, status, message  = login(login_mail)
    log.debug('MAIN: unlock result: {output} (trimmed)'.format(output=output[:15]))

    if err:
        log.debug('MAIN: Error occured: {err}'.format(err=err))
        set_notification(status, message)
        exit(1)
    if status or message:
        set_notification(status, message)
    else:
        output = keychain.setpassword('alfred-bitwarden-session-key', output.strip())
        if output:
            log.debug('MAIN: Error setting session key occured: {output}'.format(output=output))
            set_notification('Error setting session-key.', output)
            exit(1)
        else:
            set_login()
            set_notification('Unlock successful.', 'User: {user}'.format(user=login_mail))

if __name__ == '__main__':
    wf = Workflow()
    log = wf.logger
    wf.run(main)</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>8B840C52-8B3C-4795-95A2-B8BFB3AD4C24</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>DE8D285B-733F-4B2D-91DA-4613717E2005</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>bw</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}". Please wait...</string>
				<key>script</key>
				<string># coding=utf-8
import json
from subprocess import Popen, PIPE
import os

search = "{query}"
FOLDER_SWITCH = '-f'

my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

result = {"items": []}  # type: dict


class SearchType(object):
    items = 'items'
    folders = 'folders'


def get_session_key():
    cmd = 'security find-generic-password -w -s alfred-bitwarden-session-key'
    proc = Popen(cmd.split(), stdout=PIPE)
    output = proc.stdout.read().decode('utf8')
    if not output:
        print(json.dumps(error_result(type="login")))
        exit(1)
    return output


def check_login():
    proc = Popen("launchctl getenv BW_ASKPASS".split(), stdout=PIPE)
    output = proc.stdout.read().decode('utf8')
    if not output:
        print(json.dumps(error_result(type="locked")))
        exit(1)
    return


def add_result(uid, title, subtitle, arg, result_list):
    item = {
        "uid": uid,
        "title": title,
        "subtitle": subtitle,
        "arg": arg,
        "icon": {
            "path": "icon.png"
        }
    }
    result_list["items"].append(item)
    return result_list


def error_result(type):
    uid_switcher = {
        "login": {"uid": "error-login", "title": "It appears you are not logged in to Bitwarden.",
                  "subtitle": "Please login using the \'bwlogin\' command or press \'ctrl\' + enter to login now.",
                  "arg": "scriptlocationnotset"},
        "install": {"uid": "error-noinstall", "title": "You do not have the Bitwarden CLI Installed.",
                    "subtitle": "Press enter to be taken to the install instructions.", "arg": "\'error-noinstall\'"},
        "none": {"uid": "error-nonefount", "title": "No search results matching your query found.",
                 "subtitle": "Please try again with a different query.", "arg": "\'error-nonefound\'"},
        "locked": {"uid": "error-locked", "title": "Your vault is locked.",
                   "subtitle": "Please unlock your vault with \'bwunlock\' or press \'fn\' + enter to unlock now..",
                   "arg": "scriptlocationnotset"},
    }
    uid = uid_switcher.get(type)["uid"]
    title = uid_switcher.get(type)["title"]
    subtitle = uid_switcher.get(type)["subtitle"]
    arg = uid_switcher.get(type)["arg"]
    output = add_result(uid=uid, title=title, subtitle=subtitle, arg=arg, result_list=result)
    return output


def get_bw_exec():
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        print(json.dumps(error_result(type="install")))
        exit(2)
    return bw_exec


def get_bw_search_result(bw_exec, session_key, bw_list_obj, bw_search, bw_folder_id=None):
    cmd = "{bw_exec} --session={session_key} list {bw_list_obj} --search={bw_search}".format(bw_exec=bw_exec,
                                                                                             session_key=session_key,
                                                                                             bw_list_obj=bw_list_obj,
                                                                                             bw_search=bw_search)
    if bw_folder_id is not None:
        cmd = "{cmd} --folderid={folderid}".format(cmd=cmd, folderid=bw_folder_id)
    proc = Popen(cmd.split(), env=my_env, stdout=PIPE, stderr=PIPE)
    output, err = proc.communicate()
    if "mac failed." in err.decode('utf8').strip():
        print(json.dumps(error_result(type="locked")))
        exit(1)
    if "Vault is locked." in output.decode('utf8').strip():
        print(json.dumps(error_result(type="locked")))
        exit(1)
    try:
        results = json.loads(output)
    except ValueError:
        if "You are not logged in" in output.decode('utf8'):
            print(json.dumps(error_result(type="login")))
            exit(1)
    try:
        if not results:
            print(json.dumps(error_result(type="none")))
            exit(2)
    except NameError:
        print(json.dumps(error_result(type="none")))
        exit(2)
    return results


def parse_search_string(bw_exec, session_key, search):
    """
    Parse user input and split into search string and folder name.
    Then search for folder id by name and return *first* folder id, which is found.
    :param bw_exec: path to Bitwarden executable
    :param session_key: Bitwarden session key
    :param search: user search input
    :return: tuple(search string, folder_id)
    """
    tokens = search.split()
    if FOLDER_SWITCH not in tokens:
        return search, None

    folder_id = None
    token_id = tokens.index(FOLDER_SWITCH)
    try:
        tokens.pop(token_id)
        folder_name = tokens.pop(token_id)
        res = get_bw_search_result(bw_exec=bw_exec, session_key=session_key,
                                   bw_list_obj=SearchType.folders,
                                   bw_search=folder_name)
        folder_id = res[0].get('id')
    except IndexError:
        pass
    finally:
        return ' '.join(tokens), folder_id


def bw_search(bw_exec, session_key, search):
    search_str, folder_id = parse_search_string(bw_exec, session_key, search)
    return get_bw_search_result(bw_exec=bw_exec, session_key=session_key,
                                bw_list_obj=SearchType.items,
                                bw_search=search_str,
                                bw_folder_id=folder_id)


def build_bw_result(bw_exec, session_key, search_result):
    for bw_item in search_result:
        subtitle = ""
        item_id = bw_item["id"]
        name = bw_item["name"]
        try:
            username = bw_item["login"]["username"].encode('utf-8').strip()
        except (KeyError, AttributeError):
            username = "∅"
        finally:
            subtitle += 'Username: {username}'.format(username=username)
        try:
            if bw_item["login"]["totp"]:
                subtitle += " ⸰ OTP: *"
        except (KeyError, AttributeError):
            pass
        add_result(uid=item_id, title=name, subtitle=subtitle, arg=[name, item_id], result_list=result)


session_key = get_session_key()
check_login = check_login()
bw_exec = get_bw_exec()
bw_search_result = bw_search(bw_exec=bw_exec, session_key=session_key, search=search)
build_bw_result(bw_exec=bw_exec, session_key=session_key, search_result=bw_search_result)

print(json.dumps(result))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Search Bitwarden Vault</string>
				<key>title</key>
				<string>Search Bitwarden Vault</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>29656ADA-02CB-48FC-BC0E-20376CF8D8EF</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string>Copied username to clipboard.</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>8F65DC4B-ED8E-4EE0-A6E0-14C1F0CDF3A4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>transient</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>815177FB-CED1-42F3-AC5B-C1AC60735FA1</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
import json
from subprocess import Popen, PIPE
import os

details = sys.argv[1].replace('"','')
details = details.splitlines()
details.pop(0)

my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

def get_bw_exec():
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        print(json.dumps(error_result(type="install")))
        exit(2)
    return bw_exec

def getpassword(service):
    cmd = '/usr/bin/security find-generic-password -w -s {service}'.format(service=service)
    proc = Popen(cmd.split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    return output.strip()

if 'error-noinstall' in details[0]:
    cmd = 'open https://github.com/bitwarden/cli'
    proc = Popen(cmd.split(), stdout=PIPE)
    exit(1)
elif 'error-nonefound' in details[0]:
    exit(1)
else:
    bw_exec = get_bw_exec()
    session_key = getpassword('alfred-bitwarden-session-key')
    my_env["BW_SESSION"] = str(session_key)
    cmd = "{bw_exec} get username {item}".format(bw_exec=bw_exec, item=details[1])
    proc = Popen(cmd.split(), env=my_env, stdout=PIPE)
    output =  proc.stdout.read().decode()
    sys.stdout.write(output.strip())
    sys.stdout.flush()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>5811419C-5D78-450A-8F28-46CC209BF760</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>bwlogout</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Bitwarden Logout</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>C2D0FB11-55FC-4FD2-B32A-9923121F0321</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
import json
from subprocess import Popen, PIPE
import os

details = sys.argv[1].replace('"','')
details = details.splitlines()
details.pop(0)

my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

def get_bw_exec():
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        print(json.dumps(error_result(type="install")))
        exit(2)
    return bw_exec

def getpassword(service):
    cmd = '/usr/bin/security find-generic-password -w -s {service}'.format(service=service)
    proc = Popen(cmd.split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    return output.strip()

if 'error-noinstall' in details[0]:
    cmd = 'open https://github.com/bitwarden/cli'
    proc = Popen(cmd.split(), stdout=PIPE)
    exit(1)
elif 'error-nonefound' in details[0]:
    exit(1)
else:
    bw_exec = get_bw_exec()
    session_key = getpassword('alfred-bitwarden-session-key')
    my_env["BW_SESSION"] = str(session_key)
    cmd = "{bw_exec} get password {item}".format(bw_exec=bw_exec, item=details[1])
    proc = Popen(cmd.split(), env=my_env, stdout=PIPE)
    output =  proc.stdout.read().decode()
    sys.stdout.write(output.strip())
    sys.stdout.flush()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>D049EE1A-03D1-4BDF-8920-EE8667E7365C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string>Copied password to clipboard.</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>8C058736-CA55-492F-B2EC-8715A0266564</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<false/>
				<key>clipboardtext</key>
				<string>{query}</string>
				<key>transient</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>201D2F2C-024E-4FA6-8B0C-CF32974E5077</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>#!/bin/bash
for f in bw /usr/local/bin/bw /opt/local/bin/bw /usr/bin/bw; do
    if test -x $f; then
        bw_exec=$f
    fi
done
export PATH=$PATH:/usr/local/bin &amp;&amp; $bw_exec logout

security delete-generic-password -s alfred-bitwarden-session-key &gt; /dev/null

launchctl unsetenv BW_ASKPASS

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>A2718C33-DE84-4E0F-8A09-37DA3C9E8732</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>bwunlock</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Bitwarden Vault Unlock</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>BD91F384-487A-41CF-87FD-72F6CC5FA91F</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Logged out</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>266860CE-FC28-42E1-998B-229C5AEDF262</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
import json
from subprocess import Popen, PIPE
import os

my_env = os.environ.copy()
my_env["PATH"] = "/usr/local/bin:/opt/local/bin:" + my_env["PATH"]

result = {}  # type: dict
result["items"] = []


def get_session_key():
    cmd = 'security find-generic-password -w -s alfred-bitwarden-session-key'
    proc = Popen(cmd.split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    if not output:
        print("ERROR: Not currently logged into bitwarden")
        exit(1)
    return output


def check_login():
    proc = Popen("launchctl getenv BW_ASKPASS".split(), stdout=PIPE)
    output = proc.stdout.read().decode()
    if not output:
        print("ERROR: Not currently logged into bitwarden")
        exit(1)
    return output


def get_bw_exec():
    bw_exec = ""
    for f in ['/usr/local/bin/bw', '/opt/local/bin/bw', '/usr/bin/bw']:
        if os.path.exists(f):
            bw_exec = f
    if not bw_exec:
        print("ERROR: Bitwarden CLI not installed")
        exit(2)
    return bw_exec

def bw_sync(bw_exec, session_key):
    cmd = "{bw_exec} --session={session_key} sync -f".format(bw_exec=bw_exec, session_key=session_key)
    proc = Popen(cmd.split(), env=my_env, stdout=PIPE, stderr=PIPE)
    output, _ = proc.communicate()
    if "You are not logged in" in output.decode():
        print("ERROR: Not currently logged into bitwarden")
        exit(1)

session_key = get_session_key()
loginScriptLocation = check_login()
bw_exec = get_bw_exec()
bw_sync(bw_exec=bw_exec, session_key=session_key)

print("Sync completed successfully.")</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>09AC0796-377F-4D73-87DC-B1164AC85A95</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>bwsync</string>
				<key>subtext</key>
				<string>Sync Bitwarden Vault</string>
				<key>text</key>
				<string>Sync Bitwarden Vault</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>FF2D41F7-FB7E-4CCD-B82B-4F66FCC78F37</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Vault Sync Completed</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>D71065D5-E20E-435B-A76B-9C351D59165F</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Login Email Address Set To:</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>8820573B-DB5E-4B65-9178-3DD86CF620CC</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#!/bin/bash

security add-generic-password -a "alfred-bitwarden-email-address" -s "alfred-bitwarden-email-address" -w "{query}" -C "note" -U

echo "{query}"

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>102D0B94-B4FC-4450-9B5B-9D76AA0FF12C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>bwsetemail</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Set Bitwarden Email Address</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>59F80385-2185-4AB0-BE88-A49588D5F66B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>bwsetserver</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Set Bitwarden Server Address</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>482846CB-67CD-458E-9E2F-F4F208AB34D7</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#!/usr/bin/env bash
for f in bw /usr/local/bin/bw /opt/local/bin/bw /usr/bin/bw; do
    if test -x $f; then
        bw_exec=$f
    fi
done

export PATH=$PATH:/usr/local/bin
$bw_exec config server {query} &gt; /dev/null 2&gt;&amp;1

echo {query}

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>EF20647F-5BE3-4143-A667-40375A6C91F8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Login Server Set To:</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>B4A5236B-C4A6-4799-A0BE-28E6035E6337</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#!/bin/bash

if ! [[ $1 == "on" ]] &amp;&amp; ! [[ $1 == "off" ]]; then
	echo "error: $1 - Neither on nor off";
	exit 1;
fi

security add-generic-password -a "alfred-bitwarden-2fa-enabled" -s "alfred-bitwarden-2fa-enabled" -w "$1" -C "note" -U

echo "$1"

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>C594F6CC-98D0-45DF-871B-AACC53E6B44C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>bwset2fa</string>
				<key>subtext</key>
				<string>on/off</string>
				<key>text</key>
				<string>Bitwarden 2FA login</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>DF86BC53-DFDC-4862-879C-2988E0680511</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>2FA login:</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>2262A79A-ACCC-44CF-9C89-051CB07A0CB4</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>keyword</key>
				<string>bwset2famethod</string>
				<key>subtext</key>
				<string>0-5 (Not required for Authenticator App provider)</string>
				<key>text</key>
				<string>Set Bitwarden 2FA method</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>FED5E784-7A96-4E70-BA0D-40E4C79B7C98</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#!/bin/bash

re='^[0-5]+$'
if ! [[ $1 =~ $re ]] || ! [[ ${#1} == "1" ]]; then
	echo "error: $1 - Not a number in range 0-5";
	exit 1;
fi

security add-generic-password -a "alfred-bitwarden-2fa-method" -s "alfred-bitwarden-2fa-method" -w "$1" -C "note" -U

echo "$1"

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>69788964-322B-4148-ADFF-46DD4DB9276E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>2FA method set to:</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>7D01ACF0-2569-46CE-8A8D-AD9CD3736476</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#!/bin/bash

security delete-generic-password -s alfred-bitwarden-2fa-method &gt; /dev/null
echo "{query}"

osascript -e 'tell application "Alfred 3" to search "bw"'</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>58852D6A-18EC-4719-8B6D-3830DE3EECE7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>2FA method removed</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>C59B281E-81B3-45CC-AF44-99A6A66C2087</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>See installation instructions at https://github.com/blacs30/bitwarden-alfred-workflow
For support or contribution please log a ticket on https://github.com/blacs30/bitwarden-alfred-workflow

NOTE: This Alfred Workflow is not affiliated in any way with Bitwarden. The Bitwarden trademark and logo are owned by Bitwarden.com. The Bitwarden logo and product name have been used with permission of the Bitwarden team.

My thanks go out to Bitwarden for their awesome product and the new CLI!</string>
	<key>uidata</key>
	<dict>
		<key>01DFFE0F-13AB-4E19-AC39-8E2177548224</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>120</integer>
		</dict>
		<key>09AC0796-377F-4D73-87DC-B1164AC85A95</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>670</integer>
		</dict>
		<key>102D0B94-B4FC-4450-9B5B-9D76AA0FF12C</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>780</integer>
		</dict>
		<key>201D2F2C-024E-4FA6-8B0C-CF32974E5077</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>450</integer>
		</dict>
		<key>2262A79A-ACCC-44CF-9C89-051CB07A0CB4</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>1010</integer>
		</dict>
		<key>266860CE-FC28-42E1-998B-229C5AEDF262</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>560</integer>
		</dict>
		<key>29656ADA-02CB-48FC-BC0E-20376CF8D8EF</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>300</integer>
		</dict>
		<key>403521D2-AFA4-4C11-A9AC-45549345A1DE</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>482846CB-67CD-458E-9E2F-F4F208AB34D7</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>890</integer>
		</dict>
		<key>5811419C-5D78-450A-8F28-46CC209BF760</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>340</integer>
		</dict>
		<key>58852D6A-18EC-4719-8B6D-3830DE3EECE7</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>1240</integer>
		</dict>
		<key>58BA8F4E-3368-453A-9490-DBE7FE60328C</key>
		<dict>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>120</integer>
		</dict>
		<key>59F80385-2185-4AB0-BE88-A49588D5F66B</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>780</integer>
		</dict>
		<key>5D0CA291-8861-4216-8985-C0CB13A7A0D2</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>69788964-322B-4148-ADFF-46DD4DB9276E</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>1130</integer>
		</dict>
		<key>7D01ACF0-2569-46CE-8A8D-AD9CD3736476</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>1130</integer>
		</dict>
		<key>815177FB-CED1-42F3-AC5B-C1AC60735FA1</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>340</integer>
		</dict>
		<key>8820573B-DB5E-4B65-9178-3DD86CF620CC</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>780</integer>
		</dict>
		<key>8B840C52-8B3C-4795-95A2-B8BFB3AD4C24</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>230</integer>
		</dict>
		<key>8C058736-CA55-492F-B2EC-8715A0266564</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>450</integer>
		</dict>
		<key>8F65DC4B-ED8E-4EE0-A6E0-14C1F0CDF3A4</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>340</integer>
		</dict>
		<key>9CD82344-6D4F-4C13-BB10-342D19DBE209</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>230</integer>
		</dict>
		<key>A1412D16-E101-4A82-8841-485C32764480</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>A2718C33-DE84-4E0F-8A09-37DA3C9E8732</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>560</integer>
		</dict>
		<key>B4A5236B-C4A6-4799-A0BE-28E6035E6337</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>890</integer>
		</dict>
		<key>BD91F384-487A-41CF-87FD-72F6CC5FA91F</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>560</integer>
		</dict>
		<key>C2D0FB11-55FC-4FD2-B32A-9923121F0321</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>450</integer>
		</dict>
		<key>C594F6CC-98D0-45DF-871B-AACC53E6B44C</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>1010</integer>
		</dict>
		<key>C59B281E-81B3-45CC-AF44-99A6A66C2087</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>1240</integer>
		</dict>
		<key>D049EE1A-03D1-4BDF-8920-EE8667E7365C</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>450</integer>
		</dict>
		<key>D21298B3-763D-48F9-A804-C3B06D3B70E7</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>120</integer>
		</dict>
		<key>D71065D5-E20E-435B-A76B-9C351D59165F</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>670</integer>
		</dict>
		<key>DE8D285B-733F-4B2D-91DA-4613717E2005</key>
		<dict>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>300</integer>
		</dict>
		<key>DF86BC53-DFDC-4862-879C-2988E0680511</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>1010</integer>
		</dict>
		<key>E78B5564-10CE-469F-9C55-B56C3E7D41A7</key>
		<dict>
			<key>xpos</key>
			<integer>880</integer>
			<key>ypos</key>
			<integer>120</integer>
		</dict>
		<key>EF20647F-5BE3-4143-A667-40375A6C91F8</key>
		<dict>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>890</integer>
		</dict>
		<key>FED5E784-7A96-4E70-BA0D-40E4C79B7C98</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>1130</integer>
		</dict>
		<key>FF2D41F7-FB7E-4CCD-B82B-4F66FCC78F37</key>
		<dict>
			<key>xpos</key>
			<integer>220</integer>
			<key>ypos</key>
			<integer>670</integer>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>STATUS_MESSAGE</key>
		<string>2FA config not correct/missing.</string>
		<key>STATUS_MESSAGE_DESC</key>
		<string>? Two-step login method: (Use arrow keys)
❯ Authenticator App 
  Email 
  ──────────────
  Cancel [9D[9C</string>
	</dict>
	<key>variablesdontexport</key>
	<array>
		<string>STATUS_MESSAGE_DESC</string>
		<string>STATUS_MESSAGE</string>
	</array>
	<key>version</key>
	<string>1.3.0</string>
	<key>webaddress</key>
	<string>https://github.com/blacs30/bitwarden-alfred-workflow</string>
</dict>
</plist>
