require-module plug

plug plug https://github.com/alexherbo2/plug.kak %{
    define-command plug-upgrade -docstring 'plug-upgrade' %{
        plug-install
        plug-execute lsp cargo build --release
    }
}

plug-core %{
    set-option global makecmd 'make -j 8'
    set-option global grepcmd 'rg --column --with-filename'

    alias global u enter-user-mode
}

plug-old lsp https://github.com/kak-lsp/kak-lsp %{
  lsp-enable

  map -docstring 'lsp definition' global goto d '<esc>: lsp-definition<ret>'
  map -docstring 'lsp implementation' global goto D '<esc>: lsp-implementation<ret>'
}

plug alacritty https://github.com/alexherbo2/alacritty.kak

plug prelude https://github.com/kakounedotcom/prelude.kak
plug connect https://github.com/kakounedotcom/connect.kak %{
    require-module connect-fzf
    alias global terminal alacritty-terminal
    alias global popup alacritty-terminal-popup
}

plug auto-pairs https://github.com/alexherbo2/auto-pairs.kak %{
	auto-pairs-enable
}

plug surround https://github.com/alexherbo2/surround.kak

plug move-line https://github.com/alexherbo2/move-line.kak %{
  map -docstring 'Move selected lines below' global normal <down> ': move-line-below<ret>'
  map -docstring 'Move selected lines above' global normal <up> ': move-line-above<ret>'
}


plug-old kakboard https://github.com/lePerdu/kakboard %{
    hook global WinCreate .* %{ kakboard-enable }
}

plug-old vertical-selection https://github.com/occivink/kakoune-vertical-selection

plug-old buffers https://github.com/Delapouite/kakoune-buffers


# plug "ul/kak-lsp" do %{
#     cargo build --release --locked
#     cargo install --force --path .
# } config %{
#     # uncomment to enable debugging
#     # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
#     # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

#     # this is not necessary; the `lsp-enable-window` will take care of it
#     # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

#     set global lsp_diagnostic_line_error_sign '║'
#     set global lsp_diagnostic_line_warning_sign '┊'

#     lsp-auto-hover-insert-mode-enable

#     set-option global lsp_auto_highlight_references true

#     define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
#     define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
#     define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

#     define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
#     hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
#         set-option window lsp_auto_highlight_references true
#         set-option window lsp_hover_anchor false
#         lsp-auto-hover-enable
#         echo -debug "Enabling LSP for filtetype %opt{filetype}"
#         lsp-enable-window
#     }

#     hook global WinSetOption filetype=(rust) %{
#         set window lsp_server_configuration rust.clippy_preference="on"
#     }

#     hook global WinSetOption filetype=rust %{
#         hook window BufWritePre .* %{
#             evaluate-commands %sh{
#                 test -f rustfmt.toml && printf lsp-formatting-sync
#             }
#         }
#     }

#     hook global KakEnd .* lsp-exit
# }

define-command -docstring "save and quit" x "write-all; quit"

define-command files -docstring 'Open one or many files' %{ evaluate-commands %sh{
    FILES=$(rg --hidden --files | wofi -d)
    for file in $FILES; do
        printf 'eval -client %%{%s} edit %%{%s}\n' "$kak_client" "$file" | kak -p "$kak_session"
    done
} }

define-command buffers -docstring 'Switch to a buffer' %{ evaluate-commands %sh{
    BUFFER=$(eval set -- "$kak_buflist"; for buf in "$@"; do echo "$buf"; done | wofi -d)
    [ -n "$BUFFER" ] && echo "eval -client '$kak_client' 'buffer $BUFFER'" | kak -p "$kak_session"
} }

source "~/.config/kak/mappings.kak"
source "~/.config/kak/coding.kak"
source "~/.config/kak/ui.kak"
